#   libpulp - User-space Livepatching Library
#
#   Copyright (C) 2020-2021 SUSE Software Solutions GmbH
#
#   This file is part of libpulp.
#
#   libpulp is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Lesser General Public
#   License as published by the Free Software Foundation; either
#   version 2.1 of the License, or (at your option) any later version.
#
#   libpulp is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Lesser General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with libpulp.  If not, see <http://www.gnu.org/licenses/>.

# ULP tools location.
ULP = $(top_builddir)/tools/ulp
ULP_POST = $(top_builddir)/tools/ulp_post
ULP_PACKER = $(ULP) packer
ULP_REVERSE = $(top_builddir)/tools/ulp_reverse

# Build and link requirements for live-patchable (target) libraries.
TARGET_CFLAGS = \
  -fPIC \
  -fpatchable-function-entry=$(ULP_NOPS_LEN),$(PRE_NOPS_LEN) \
  -fno-inline \
  $(AM_CFLAGS)
TARGET_LDFLAGS = --build-id $(AM_LDFLAGS)

# In libtool, convenience libraries are not installed, so they do not
# need -rpath, which causes them to be statically linked.  However,
# libpulp can only live patch dynamically linked libraries, so pass
# -rpath to libtool, which causes the linking to become dynamic.
CONVENIENCE_LDFLAGS = -rpath $(libdir) $(AM_LDFLAGS)

# The following custom rules are triggered by <testname>_DEPENDENCIES:

# This rule causes the target library to be post-processed with
# ulp_post, which replaces single-byte with multi-byte nops. Files with
# .post extension track whether the respective libraries have already
# been post-processed.
.libs/lib%.post: lib%.la
	$(ULP_POST) .libs/lib$*.so
	touch $@

# These rules cause the livepatch metadata to be built. The .ulp and
# .dsc targets depends on check_LTLIBRARIES, because .la targets
# indirectly produce the .so files they need (it is impossible to have
# .ulp and .dsc targets depend directly on .so files, because libtool
# does not create .so targets).
%.dsc: %.in $(check_LTLIBRARIES)
	sed -e "s|__ABS_BUILDDIR__|$(abs_builddir)|" $< > $*.tmp
	$(top_srcdir)/tests/offsets.py $*.tmp $@
	rm -f $*.tmp

%.ulp: %.dsc $(check_LTLIBRARIES)
	$(ULP_PACKER) $< -o $@

%.rev: %.ulp
	$(ULP_REVERSE) $< $@
